%% Calcium Imaging Analysis
% Preparation of data using FluoroSNNAP (tapan-patel)
% input: txt files of FluoroSNNAP
% Last updated: 03'04'2025
% By Geke van Tongeren

% Output:
% Separate excel files with the data for every cell line
% Combined excel file for all cell lines
% Significance over all ROIs with figures
% Significance over cell lines (averaged ROIs) with figures


% %% Load the files
instructionMessage1 = 'Please select the folder where the txt summary files can be found that came out of the FluoroSNNAP';
myDir1 = uigetdir('', instructionMessage1); %Get directory where the txt files are

instructionMessage2 = 'Please select the output folder where you want to store the separate excel files of each cell line';
outputfolder = myDir1 ; %uigetdir('', instructionMessage2); %Change to desired folder;

instructionMessage3 = 'Please select the folder where the separate excel files of each cell line can be found';
myDir2 = outputfolder; %uigetdir('', instructionMessage3); %Get directory where the txt files are

instructionMessage4 = 'Please select the output folder where you want to store the allCellLines excel sheet';
outputfolder2 = uigetdir('', instructionMessage4); %Change to desired folder

% instructionMessage5 = 'Please select the folder where the AllCellLines excel files is located';
myDir3 = outputfolder2;  %uigetdir('', instructionMessage5); %Get directory where the txt files are

% instructionMessage6 = 'Please select the folder where the separate excel files are located';
myDir4 = outputfolder; %uigetdir('', instructionMessage6); %Get directory where the txt files are

instructionMessage7 = 'Please select the folder in which the averaged files need to be stored';
myDir5 = uigetdir('', instructionMessage7);

%% Make excel file from the txt files
myFilesT = dir(fullfile(myDir1,'*.txt')); %Get all txt files in directory

% loop for every file of txt
for e = 1: length(myFilesT)
    efile2be = myFilesT(e).name;
    if contains(efile2be, '_summary')

        % Open txt file
        excelldata = readtable(efile2be);
        fid = fopen(efile2be, 'rt');  % Open the file in text mode

        % Check if the file was successfully opened
        if fid == -1
            error('File could not be opened. Please check the file path and name.');
        end

        % Track line number and make file to store data in
        lineNumber = 0;
        txtData = {};

        % Look for the line containing "Neuron ID"
        tline = fgetl(fid);
        while ischar(tline)
            lineNumber = lineNumber + 1;
            if contains(tline, 'Neuron ID')
                break;
            end
            tline = fgetl(fid);  % Read the next line
        end

        % Start reading the data after "Neuron ID" line
        while ischar(tline)
            txtData{end+1} = tline;
            tline = fgetl(fid);
        end

        % Close file
        fclose(fid);
        data = txtData'; % Better format

        % Split each string by tab character ('\t')
        splitData = cellfun(@(x) strsplit(x, '\t'), data, 'UniformOutput', false);
        headers = splitData{1};
        dataRows = splitData(2:end);

        % Ensure headers contain exactly 12 values
        headers = splitData{1};
        if numel(headers) ~= 12
            error('The number of headers is not equal to 12.');
        end

        % Make empty cells the size of the data
        processedData = cell(length(dataRows), 12);

        for i = 1:length(dataRows)
            processedData(i, :) = dataRows{i};
        end

        % Convert to table
        T = cell2table(processedData, 'VariableNames', headers);

        % Make every column a double (here column 1 through 12)
        columnNames = T.Properties.VariableNames;
        for d=1:length(columnNames)
            Name=T.Properties.VariableNames{d};
            T.(Name);
            double = str2double(T.(Name));
            T.(Name) = double;
        end

        %Save to excel sheet
        filenameParts = split (efile2be, '-');
        outputfilename = sprintf('summary_%s.xlsx', filenameParts{1},filenameParts{2});

        % Save to excel sheet with name of the file
        outputfilename = fullfile(outputfolder, outputfilename);
        writetable(T, outputfilename);
    end
end

%% Make one big overview excel file
% This way it is easier to put into graphpad
myFiles = dir(fullfile(myDir2,'*.xlsx'));

% Taking the different ROIs in every cell line as different trials
combinedData= table();
% Loop over each file and read the data
for i = 1:length(myFiles)
    %Add column for the different groups
    if contains(myFiles(i).name, 'summary')
        if contains(myFiles(i).name, 'KO')
            FileName= myFiles(i).name;
            currenttable = readtable(FileName);
            currenttable.Group = repmat({'KO'}, height(currenttable), 1); % {'KO'}
        elseif contains(myFiles(i).name, 'MR');
            FileName= myFiles(i).name;
            currenttable = readtable(FileName);
            currenttable.Group = repmat({'MR'}, height(currenttable), 1);
        else
            fprintf ('No excel file that we will use, onto the next');
        end
        % For every cell line
        celline = extractBefore(FileName, '.xlsx');
        celline = extractAfter(celline, 'summary_');
        currenttable.CellLine = repmat({celline}, height(currenttable), 1);

        % Combine the files
        filePath = fullfile(myDir1, myFiles(i).name);
        data = currenttable;
        combinedData = [combinedData; currenttable];

        % Tweaks
        %combinedData.x_ISI__s_ = str2double(combinedData.x_ISI__s_);

        % Save excel file
        combinedName = 'AllCellLines.xlsx';
        combinedName = fullfile(outputfolder2, combinedName);
        writetable(combinedData, combinedName);
    else
        fprintf('No summary file');
    end
end

%% % Significance

% Calculations 

cleanData = combinedData;
cleanData.Group(strcmp(cleanData.Group, 'KO')) = {'0'};
cleanData.Group(strcmp(cleanData.Group, 'MR')) = {'1'};
cleanData.Group = str2double(cleanData.Group);

% Remove NaN
cleanData.CellLine=[]; % Remove cellline for this part
cleanData.NeuronID=[];
any(isnan(cleanData{:, 2:end}));
validRows = ~any(isnan(cleanData{:, 2:end}), 2) & ~isnan(cleanData.Group);
cleanData = cleanData(validRows, :);

%Testing
Group=cleanData.Group;
columns= cleanData.Properties.VariableNames;
columns = columns(~strcmp(columns, 'Group') & ~strcmp(columns, 'x_Assemblies') & ~strcmp(columns, 'ClusteringCoef'));

% Make txt file
filename = fullfile(myDir3,'Significance.txt');
fileID = fopen(filename, 'w');
if fileID == -1
    error('Failed to open the file for writing.');
end

% Testing
for i = 1:length(columns)
    [h, p] = kstest(cleanData{:, columns{i}});
    fprintf('Shapiro-Wilk Test for %s: p = %.4f and h:%.4f\n', columns{i}, p, h);
    if p < 0.05
        fprintf(fileID,' -> %s is NOT normally distributed (reject H0)\n', columns{i});
        % Not normally distributed
        p = ranksum(cleanData{cleanData.Group == 0, columns{i}}, cleanData{cleanData.Group == 1, columns{i}});
        fprintf(fileID,'Mann-Whitnoney U Test for %s: p = %.4f\n', columns{i}, p);
        fprintf (fileID,'\n\n');

    elseif p>0.05 % If normal distributed
        fprintf(fileID,' -> No significant difference in %s between groups (fail to reject H0)\n', columns{i});
        % Individual t tests
        [h, p] = ttest2(cleanData{Group==0, columns{i}}, cleanData{Group==1, columns{i}});
        fprintf(fileID,'T test is calculated of Variable: %s, p-value: %.4f and h:%.4f\n', columns{i}, p, h);
        fprintf (fileID,'\n\n');
    end
end;

fclose(fileID);

%% Calculate averages over the groups
% Calculate everything you need
column_m = combinedData.Properties.VariableNames;
m=0;
Overview = [];
uniqueGroups = unique(combinedData.Group);

for g = 1:length(uniqueGroups);
    groupName = uniqueGroups{g}; %  with GroupNames use {}
    groupData = combinedData(strcmp(combinedData.Group, groupName),:);
    for m=1:(length(column_m));
        m=m+1;
        if m>2 && m<12
            columntoav = column_m{m};
            meanValue = nanmean(groupData{:,columntoav});
            meanName = sprintf('Mean_%s', columntoav);
            Overview.(meanName) = meanValue; %&& Save it for every variable
        end
    end
    % % Rename for the Groups for workspace
    % newFileName = sprintf('Overview_%s', groupName);
    % eval([newFileName '=Overview;']);

    % Save the files as txt files in a folder based on groupName
    % These txt files can be used for a quick overview to see if there
    % would be a difference.
    groupName = sprintf('Overview_%s', groupName);
    newFileName = fullfile(myDir1, groupName);
    fileID = fopen(newFileName, 'w');
    fields = fieldnames(Overview);
    for t=1:length(fields)
        fieldValue = Overview.(fields{t});
        fprintf(fileID, '%s: %s\n', fields{t}, num2str(fieldValue));
    end
    fclose(fileID)
end

%% Figures
myFiles = dir(fullfile(myDir3,'*.xlsx'));

for fa=1:length(myFiles)
    if contains(myFiles(fa).name, 'AllCellLines')
        % Load excel file as table
        FileName = myFiles(fa).name;
        currenttable = readtable(FileName);

        % Make group categorical
        currenttable.Group = categorical(currenttable.Group);

        % Make a figure
        % For every column
        columnNames = currenttable.Properties.VariableNames;
        co=0;
        for co=2:(length(columnNames)-2)
            column = columnNames(co);

            % Make figures
            figure(); hold on;
            groupedData=groupsummary(currenttable, 'Group', 'mean', column);
            bar(groupedData.Group, groupedData.("mean_" + column));
            scatter(currenttable.Group, currenttable{:, column}, 'k', 'filled', 'jitter', 'on', 'jitterAmount', 0.2);
            xlabel('Group');
            ylabel(['', column]);
            title(['Bar graph of mean', column, 'by Group']);
            grid on;
            hold off;
            co=co+1;

            % Save figures dependent on the column name
            name = [column, '.fig'];
            name = [name{1}, name{2}];
            figureName = fullfile(myDir3, name);
            saveas(gcf, figureName);
        end
    end
end

%% Averaged per celline
myFiles = dir(fullfile(myDir4,'*.xlsx'));

allAvg = [];

for av = 1: length(myFiles)
    if contains(myFiles(av).name, 'summary_')
        % Load excel file as table
        FileName = myFiles(av).name;
        currenttable = readtable(FileName);

        % For all columns calculate average
        averages = varfun(@(x) mean(x, 'omitnan'), currenttable, 'OutputFormat', 'table');

        % Add Group
        averages.Group=zeros(1,1);
        averages.Fun_NeuronID=[];
        if contains(myFiles(av).name,'KO')
            averages.Group='KO';
        elseif contains(myFiles(av).name, 'MR')
            averages.Group='MR';
        end

        % Add column cell line
        celline = extractBefore(FileName, '.xlsx');
        celline = extractAfter(celline, 'summary_');
        celline_parts = split(celline, '_');
        celline = [celline_parts{2}, celline_parts{3}];
        averages.CellLine = repmat({celline}, height(averages), 1);
        averages.CellLine = char(averages.CellLine);

        % Put all together in one table
        averages.CellLine = string(averages.CellLine);

        % Add day
        if contains(myFiles(av).name, 'd31')
            day = 'd31';
            averages.Day = repmat({day}, height(averages), 1);
        elseif contains(myFiles(av).name, 'd41')
            day = 'd41';
            averages.Day = repmat({day}, height(averages), 1);
        end

        % Now concatenate the tables
        allAvg = vertcat(allAvg, averages);
    end
end

% Calculate per cell line
allAvg_cellLine = varfun(@mean, allAvg, "GroupingVariables", "CellLine", "InputVariables", ...
    setdiff(allAvg.Properties.VariableNames, ["Group", "CellLine", "Day"]));

% Restore the "Group" column by taking the first occurrence for each CellLine
[~, idx] = unique(allAvg.CellLine); % Find first occurrence indices
allAvg_cellLine.Group = allAvg.Group(idx); % Assign the correct Group
allAvg = allAvg_cellLine;

% Save the table as an excel file
if contains(myFiles(av).name, 'd41')
    filename = fullfile (myDir5, 'allAvg_d41.xlsx');
else
    filename = fullfile (myDir5, 'allAvg_d31.xlsx');
end

writetable(allAvg, filename);

% Calculate significance
% Use combinedData made above
allAvgS = allAvg;
allAvgS.Group = cellstr(allAvgS.Group); % Convert to cell array
allAvgS.Group(strcmp(allAvgS.Group, 'K')) = {0};
allAvgS.Group(strcmp(allAvgS.Group, 'M')) = {1};
allAvgS.Group = cell2mat(allAvgS.Group);

% % Remove NaN
% any(isnan(allAvgS{:, 1:end-2}));
% validRows = ~any(isnan(allAvgS{:, 2:end}), 2) & ~isnan(allAvgS.Group);
% allAvgS = allAvgS(validRows, :);

%Testing
Group=allAvgS.Group;
columns= allAvgS.Properties.VariableNames;
columns = columns(~strcmp(columns, 'Group') & ~strcmp(columns, 'x_Assemblies') & ~strcmp(columns, 'ClusteringCoef') & ~strcmp(columns, 'CellLine')& ~strcmp(columns, 'GroupCount'));

% Make txt file
filename = fullfile(myDir5, 'Significance_Averaged.txt');
fileID = fopen(filename, 'w');
if fileID == -1
    error('Failed to open the file for writing.');
end

% Testing
for i = 1:(length(columns)-1)
    [h, p] = kstest(allAvgS{:, columns{i}});
    fprintf('Shapiro-Wilk Test for %s: p = %.4f and h:%.4f\n', columns{i}, p, h);
    if p < 0.05
        fprintf(fileID,' -> %s is NOT normally distributed (reject H0)\n', columns{i});
        % Not normally distributed
        p = ranksum(allAvgS{allAvgS.Group == 0, columns{i}}, allAvgS{allAvgS.Group == 1, columns{i}});
        fprintf(fileID,'Mann-Whitney U Test for %s: p = %.4f\n', columns{i}, p);
        fprintf (fileID,'\n\n');

    elseif p>0.05 % If normal distributed
        fprintf(fileID,' -> Normally distrubuted, no significant difference in %s between groups (fail to reject H0)\n', columns{i});
        % Individual t tests
        [h, p] = ttest2(allAvgS{Group==0, columns{i}}, allAvgS{Group==1, columns{i}});
        fprintf(fileID,'T test is calculated of Variable: %s, p-value: %.4f and h:%.4f\n', columns{i}, p, h);
        fprintf (fileID,'\n\n');
    end
end;

fclose(fileID);

%% Make figures
% allAvg

% Make a figure
% For every column
allAvg = allAvg_cellLine;
columnNames = allAvg.Properties.VariableNames;
for coA = 3:(length(columnNames)-1)
    column = columnNames{coA}; % Get column name as string

    % Check the type of allAvg.Group and handle accordingly
    if isstring(allAvg.Group)
        % If it's a string array, use strrep directly on the whole array
        allAvg.Group = strrep(allAvg.Group, 'K', 'Control');
        allAvg.Group = strrep(allAvg.Group, 'M', 'ADHD');
    elseif iscell(allAvg.Group)
        % If it's a cell array, apply strrep to each element using cellfun
        allAvg.Group = cellfun(@(x) strrep(x, 'K', 'Control'), allAvg.Group, 'UniformOutput', false);
        allAvg.Group = cellfun(@(x) strrep(x, 'M', 'ADHD'), allAvg.Group, 'UniformOutput', false);
    elseif ischar(allAvg.Group)
        % If it's a character array, you need to convert it to a string array first
        allAvg.Group = string(allAvg.Group);
        allAvg.Group = strrep(allAvg.Group, 'K', 'Control');
        allAvg.Group = strrep(allAvg.Group, 'M', 'ADHD');
    end

    % Convert 'Group' to categorical with custom order ('Control' on left, 'ADHD' on right)
    allAvg.Group = categorical(allAvg.Group, {'Control', 'ADHD'});

    % Compute means for each group
    groups = categories(allAvg.Group); % Unique group labels
    meanValues = splitapply(@mean, allAvg.(column), findgroups(allAvg.Group));

    % Define colors (blue & orange)
    groupColors = [0 0 1; 1 0.5 0]; % One color per group

    % Create figure
    figure;
    hold on;

    % Plot bar chart (slightly transparent)
    b = bar(groups, meanValues, 'FaceColor', 'flat');
    b.CData = groupColors; % Assign colors to bars
    b.FaceAlpha = 0.6; % Make bars slightly transparent

    % Assign colors to scatter points based on their group
    [~, groupIdx] = ismember(allAvg.Group, groups); % Map groups to indices
    scatterColors = groupColors(groupIdx, :); % Assign colors accordingly

    % Scatter plot overlay (solid blue & orange, black edges)
    scatter(allAvg.Group, allAvg.(column), 80, ...
        scatterColors, 'filled', 'MarkerEdgeColor', 'k');

    % Labels & title
    columnname = strsplit(column, '_');
    for cn=1:length(columnname)
        contains(columnname(1), 'mean') && contains(columnname(2), 'Fun') && contains(columnname(3), 'x');
        if ans == 1
            number = 4
        else 
            number = 3
        end
    end

    columnname = columnname{number};
    xlabel('Group');
    ylabel(['Mean ', columnname]);
    title(['Mean ', columnname, ' by Group']);
    grid on;
    hold off;

    % Save figure
    figureName = fullfile(myDir5, [column, '.fig']);
    saveas(gcf, figureName);
end



% End
close all
% clear all
